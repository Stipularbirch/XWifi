Version 1.3

Bug Fixes/Improvements
	Staple checks and finds firefox binary directory, propogates directory
		info to Script1 -> (Script2, Logger) 
	Staple now makes sure that DIG_DNS can resolve after checking network-manager
		is a running process, instead of doing check in Script1
	Script1 does not check to shred txt, or log files
	Script1 logs stderr and stdout to firefox.log
	Script1 improved logic for controling python execution and error controll
	Logger has log_path in webdriver for generated geckodriver.log to /dev/null
	Logger waits to get password fields before stoping web javascript
	Staple, Script1 and Script2 uses NIC that not just BROADCAST but also UP
	
Notes
	- If more than one NIC exits, first one to be found by command ip, will be
		used. For specific device, ifconfig "interface" down all others
	- Launching firefox always creates empty log file, there maybe a better
		way than to check if empty => delete everytime fireox is launnched

--------------------------------------------------------------------------------

Version 1.2

Bug Fixes/Improvements
	Script1 fixed logger retrying form fillout actions
	Script1 removed default time
	Script1 using arrays to handle exit and retry_attempts
	Script1 Restarts cycle if no free option found thus trying new mac, else
		retry attempts for any other reason relaunches firefox
	Logger had no set_time operation
	Logger fixed parameter value assignment when retry attempt
	Logger fixed timeout and driver_timeout global variable update
	Logger Has 3 failed states that could be caught; Failed to launch,
		No free Option page 1, Failed to fill of 1st,2nd,3rd or 4th page 
Notes
	- No long term testing, seems stable
	- Still clunky DIG_DNS resolution, its possible that the worst resolution
		path is not reachable 
	- Hard-coded string in logger for firefox binary directory should be made
		to be dynamic
		
--------------------------------------------------------------------------------

Version 1.1

Bug Fixes/Improvements
	Staple, when executing, follows symlink instead of relying on locate
		and correct naming structure
	When checking if Selenium profile exists, instead of relative path uses 
		absolute path
	Symlink created from $PARENT_DIR not hardcoded string
	Removed lines for redundant check for global_vars file and creation,
		firefox profile prefs.js pre removal, reference to undefined var
		$STARTING_DIR
	Script1 reduced time to wait to start pinging xfinity to 1 second
	Script1 fixed stale DIG_DNS, update every 6 failed attemps
	Script1 dig option +noedns added. Ignores server malformed packets 
	Script1 creates lock file to manage Script2 monitoring
	Script1	$T_ACT value never exceeds $T_REF value during normal cycle
	Script1 and Script2 use same command to identify which interface to use,
		no total shutdown due to mismatched when 2 or more network 
		interfaces present
	Script2 no more nm dependence, checks /sys/class/net/ directory
	Script2 curl query max time 2 seconds
	Script2 uses Script1 lock file instead of cumbersome strace
	Script2 now checks and resolves no default gateway
	Script2 tries to enable default device if down, else exits
	Script2 Checks every 3 seconds, less sleeping if required to ReSync Script1
	Logger new Class and Function structures. Smart useragent, email, fake name,
		generation, and collision avoidance. 
		
Notes
	- Script1 logger.py launch retry on error is broken
	- A minuscule chance that logger will reach a collision if macchanger sets 
	  a previously known by Comcast mac addr
	- DIG_DNS can have a clunky path to resolution
	- Unconfirmed if saving firefox cache fills up free disk space
	- Need more testing to determine efficacy of Script2 checks and 
	  resolutions
	- 2 or more NICs may cause unforseen problems
	  
--------------------------------------------------------------------------------

Version 1.0

New Features
	Refer dhcp to use preset Comcast DNS, if possible
	Subvert to 3rd party DNS After Comcast Authentication  
	Staple Defined in Path
	Use/Create Custom Firefox Profile, maintain Comcast Cache
	Force temp Selenium profile to make permenant changes   
	
Bug Fixes/Improvements
	Ensure requested dig is translated, if ! xxx.xxx.xxx.xxx -> try again
	No garbage temp files outside target directory*
	Removed redundant locating of target directory in disowned children
	Script2 no dig loop fixed
	If logger timesout, relaunches but already has Auth, set 30 min as default 
	Kill only logger firefox children
	Remove firefox cookies with specificity 

Notes
 -  staple has harcoded string looking for  ~/.mozilla/firefox and passing to
	logger.py
 -  logger.py has hardcoded strings for firefox-esr binary directory, receives
	string passed from staple, and expects ~/.cache/mozilla/firefox to be 
	a valid directory
 -  network-manager and nmcli is require to run staple
 -	staple finds parent directory by looking for it, an erronous result
	could be found if similarly named directory exists
 -  ***There is no support for 2 wireless network interfaces, results may vary***
 -  strace and macchanger are dependancies of staple
 -  selenium and python_arptable are dependancies of logger.py
 -  script1.sh when prompting ping dig not resolved, will eventually resolve
    	if it is possible by directly asking 75.75.75.75
 -  For faster reconnection performance disable ipv6. Check if dhcp is being
	defered to uses static dns 75.75.75.75, 75.75.76.76 by changes made in 
	staple script, if not manually defer dhcp.
 -  Make sure network-manager ignores ipv6 for xfinitywifi to avoid libndp error
 -  If dhclient is used by network manager comment out current requests in dhclient.conf
	to replace with: 
   	request subnet-mask, broadcast-address, time-offset, routers,
		interface-mtu, rfc3442-classless-static-routes;
 -  Add the following to NetworkManager.conf
		[device]
		wifi.scan-rand-mac-address=no
 -  If firefox is main browser, in about:config set network.captive-portal-service.enabled 
	to false for less interference
 -  Rare bug occurs where NetworkManager forgets/loses default gateway after
	successful authentication

0m18.061s
*Unconfirmed
